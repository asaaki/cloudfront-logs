[package]
name = "cloudfront-logs"
description = "AWS CloudFront log line parser"
version = "0.7.1"
edition = "2021"
readme = "README.md"
homepage = "https://github.com/asaaki/cloudfront-logs"
repository = "https://github.com/asaaki/cloudfront-logs"
categories = [
  "parser-implementations",
  "data-structures",
  "encoding",
  "rust-patterns",
  "value-formatting",
]
keywords = ["cloudfront", "log", "parser", "aws", "tsv"]
license = "MIT OR Apache-2.0"
exclude = [".assets/*", ".github/*"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# docs.rs-specific configuration
[package.metadata.docs.rs]
# document all features
all-features = true
# defines the configuration attribute `docsrs`
rustdoc-args = ["--cfg", "docsrs"]

[[bench]]
name = "brlv"
path = "benches/borrowed-real-world-validated.rs"
harness = false

[[bench]]
name = "brlu"
path = "benches/borrowed-real-world-unvalidated.rs"
harness = false

[features]
# for now we enable all features by default;
# this might change in the future.
# use default-features = false + features = ["..."] to narrow it to your needs
default = ["alloc", "time", "chrono", "parquet"]

# when you need owned versions of the structured log data; enabled by default
alloc = []

# use typed variants with time's date and time types
time = ["alloc", "dep:time"]
# use typed variants with chrono's date and time types;
# also needed for parquet support as well
chrono = ["alloc", "dep:chrono"]

# provides parquet (record writer) support
parquet = [
  "dep:parquet",
  "dep:parquet_derive",
  "chrono",
]

[dependencies]
memchr = "2.7.4"
time = { version = "0.3.36", features = ["parsing", "macros"], optional = true }
strum = { version = "0.26.3", features = ["derive"] }
chrono = { version = "0.4.38", optional = true }
parquet = { version = "52.0.0", optional = true }
parquet_derive = { version = "52.0.0", optional = true }
self_cell = "1.0.4"

[dev-dependencies]
divan = "0.1.14"

[lints.clippy]
# transformed from https://github.com/EmbarkStudios/rust-ecosystem/blob/main/lints.rs
all = { level = "warn", priority = -1 }
await_holding_lock = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_ok_or = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatched_target_os = "warn"
missing_enforced_import_renames = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
unimplemented = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
zero_sized_map_values = "warn"

# currently not enforced
# doc_markdown = "warn" -- false positives for term CloudFront
# map_err_ignore = "warn" -- no custom error types, only strings

[lints.rust]
# transformed from https://github.com/EmbarkStudios/rust-ecosystem/blob/main/lints.rs
unsafe_code = { level = "forbid", priority = -99 }
future_incompatible = "warn"
nonstandard_style = "warn"
rust_2018_idioms = "warn"
